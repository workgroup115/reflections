What happens when you initialize a repository? Why do you need to do it?

	Git creates a hidden directory (it starts with a "."), inside the parent directory in which 
	the "git init" command is run, which contains metadata about the repository. These metadata are used  to keep track of what's going on the repository (the commit history), that's why It needs to be initialized. When the repository it's created no commit is done (this can be confirmed by running "git log" command in the recently created repository and the result should be an error message like this: "Fatal: bad default revision HEAD"), regardless the directory already contains files or not.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Even though the three concepts are closely related, I see the differences among them this way:
	The working directory is the base and the other two concepts build upon it, being the repository the upper step in the pyramid and the staging area is the middle one, serving as a "hub" or "pivot" that allows the user decides which files go to the repository from the working directory and which don't for a specific commit. 

How can you use the staging area to make sure you have one commit per logical change?

	The staging area allows me "to stage" the files I want to group in a single commit, leaving the others in the working directory. This way I can commit files that relates to a logical function.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	If I want to try an experimental feature that is not taken into account in the official version I can use a branch, this way, I wouldn't mess up the master branch and still could play with the feature I have in mind. Branches are like playgrounds.

How do the diagrams help you visualize the branch structure?

	They show me the reachability of commits from my current commit in any branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is one commit that contains the changes of both branches, having the checked out branch pointing at it. This new commit could have one or two parents depending on the type of merge: fast-forward or recursive. The commits of both branches are shown chronologically in the log history. The merge of two branches has a special side effect int the diff command when comparing two commits that don't have a parent-child relationship. The diagram helps to a have a better idea of what the merge should be.

What are the pros and cons of Git's automatic merging vs always doing merges manually?
	One of the pros of automatic merging is that Git gets rid of unnecessary branches comparison that otherwise should be done manually by the user and the main con is that git doesn't always know how to merge the branches.